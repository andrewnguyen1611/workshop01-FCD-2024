[
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/1-introduce/1.1-awselastisdisasterrecovery/",
	"title": "AWS Elastic Disaster Recovery",
	"tags": [],
	"description": "",
	"content": "Introduction AWS Elastic Disaster Recovery (DRS) is a service fully managed by AWS that helps optimize system recovery strategies after disasters with many advantages such as:\nMinimize downtime and data loss: AWS DRS helps you quickly restore operations after incidents, minimizing disruption to your business. Fast and Reliable failback: Provides features such as rollback to a specific point in time, allowing you to restore the application to its previous state. Cost-saving: Use affordable storage and minimize compute resources, making disaster recovery more accessible. Supports multiple environments: Can handle recovery for both on-premises and cloud applications. AWS Elastic Disaster Recovery (DRS) supports multiple environments, so users can be more proactive in the deployment process.\nSet up and operate AWS Elastic Disaster Recovery (AWS DRS) AWS Elastic Disaster Recovery (AWS DRS) helps minimize downtime and data loss with fast, reliable recovery of on-premises and cloud applications using robust storage. Reasonable costs, minimal computing resources and point-in-time recovery.\nTo start using AWS DRS, you need to install the software on the source server and select the appropriate AWS region to store your data. The design of the migration area will help optimize costs by using appropriate storage and minimizing computing resources for continuous copying. Once deployed, you can perform non-disruptive tests to confirm system integrity.\nDuring operations, monitoring replication and performing periodic recovery and recovery drills is critical to ensure availability. When needed, you can launch recovery instances on AWS in minutes, using the latest or previous server state. Once the application is restored on AWS, you can choose to store it permanently or replicate the data back to the main site when the issue is resolved. Restoring to the main site can be done whenever you are ready.\nAWS DRS brings many benefits such as data security, cost optimization, ensuring availability, rapid recovery, and flexibility in application hosting.\n"
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/3-deploydrs/3.1-installingagent/",
	"title": "Install Elastic Disaster Recovery agent",
	"tags": [],
	"description": "",
	"content": "Install Elastic Disaster Recovery agent Return to Mobaxterm application interface Install kernel dev sudo yum install -y kernel-devel-`uname -r`\rwget -O ./aws-replication-installer-init.py https://aws-elastic-disaster-recovery-us-east-1.s3.us-east-1.amazonaws.com/latest/linux/aws-replication-installer-init.py\rsudo python3 aws-replication-installer-init.py You will then be prompted to provide some additional information\nAWS Region Name : This is the destination area. In this workshop it is us-east-1 AWS Access Key ID : The key we created in the previous step AWS Secret Access Key : The secret key we created in the previous step When you receive the prompt with\nTo replicate some of the disks, type the path of the disks, separated with a comma (for example, /dev/sda, /dev/sdb). To replicate all disks, press Enter: Click Enter After successful installation, we will see a message as shown below "
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "Introduction About Disaster Recovery To deploy a Disaster Recovery solution, there are various approaches that can be applied to address this challenge, regardless of whether it\u0026rsquo;s in an on-premise or cloud environment in general. Specifically with AWS, there are multiple solutions available to cater to the business needs.\nSo what constitutes a threat to the system (disaster)?\nNatural disasters, such as earthquakes or floods Technical failures, like power outages or network connectivity issues Human actions, such as unintentional misconfigurations or unauthorized access/modifications Recovering from a disaster can be likened to availability, which is another crucial component of your recovery strategy. While disaster recovery measures target objectives for one-time events, availability objectives measure average values over a period of time.\nIn an enterprise environment, deploying a DR solution will always depend on the business continuity plan (BCP) of the enterprise. Therefore, implementing DR in an on-premise environment is always a challenging task for businesses and deployment teams. With on-premise setups, achieving a comprehensive DR system incurs double the cost for the enterprise. If it\u0026rsquo;s a system with dozens of VMs and large configurations, the cost implications are significant. Additionally, deploying, operating, and managing the system to ensure RTO and RPO demands a highly skilled technical team.\nRecognizing these challenges, AWS in particular has introduced numerous solutions for deploying DR systems for enterprises. These solutions cater not only to on-premise systems but also to systems hosted on other clouds, even across regions within the AWS Cloud.\nDisaster recovery options in the cloud In AWS, disaster recovery strategies can be broadly categorized into four approaches, ranging from the low cost and simplicity of backups to more complex strategies using multiple active Regions.\nRegularly assessing and testing your disaster recovery strategy is crucial to instill confidence in its deployment when necessary. Utilize AWS Resilience Hub to continuously validate and monitor the resilience of your AWS workloads, including assessing whether you can achieve your RTO and RPO objectives.\nCurrently, to simplify the deployment of DR solutions, AWS has introduced the AWS Elastic Disaster Recovery service, which we will explore further below.\nContents AWS Elastic Disaster Recovery Now, let\u0026rsquo;s together deploy a basic DR system on AWS using AWS Elastic Disaster Recovery.\n"
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/2-repareresource/2.1-sourcesite/",
	"title": "Source Site",
	"tags": [],
	"description": "",
	"content": "Create VPC and other components The first step when deploying, we need to initialize the network infrastructure for 2 environments, swerting with the original environment in Singapore.\nAccess to AWS Management Console\nFind VPC Select VPC In VPC Console\nSelect Yours VPC Select Create VPC At Resource to create Select VPC and more and fill in the information\nTo save time, we will choose this Select option so that AWS will set up components such as subnet, NACL, Internetgateway, Route weble for us.\nFill in the configuration information\nName weg, fill workshop1 IPv4 CIDR, fill 172.0.0.0/16 The Tennacy configuration part we will leave at the default mechanism. If we switch to Dedicated, there will be some EC2 Inswence types that are not suiweble and will not be created in VPC with tennacy mode of Dedicate\nDue to the requirements of the lab, we will deploy in a public environment and on 1 AZ, so we will only need to Select 1 for other components and do not need to create NAT Gateway\nAfter filling in all components, select Create VPC to initialize.\nAWS will display the resource initialization sequence. Once completed, we can view the created VPC\nEnable automatic allocation of public ip address for public subnet In VPC Console\nSelect Subnets Select public subnet was created Select Actions Select Edit subnet settings At Auto-assign IP settings\nSelect Enable auto-assign publi IPv4 address Select Save Create nginx Server In the current console Find EC2 Select EC2 In EC2 Dashboard Console Select Inswence Select Launch Inswence Proceed to fill in the information New weg fill Web_ws1 At Amazon MachineImage(AMI) we select Amazon Linux 2 AMI Inswence type we leave it as default t2.micro At Key pair we Select Create new key pair Create key pair Key pair name we set WS1 Key pair type Select RSA Private key file format Select .pem Select Create key pair to create key pair At mục Network settings Select Edit VPC Select workshop1-vpc Subnet Select publicsubnet Auto-asign public IP Select Enable Select Create security group to create security for nginx server, we set up the name và fill in the describtion for the Security Group Config rule inbound\nssh Select My IP to only allow ssh to the server through your IP HTTP Select My IP to only allow opening the server via port 80 with your IP Config rule outbound\nWe leave it as default At storage, we can leave the default 8GB or increase it to 20GB depending on your needs Select Launch Template to create Inswence Install nginx Proceed to SSH into EC2 Inswence At EC2 Consoles Select Inwences -\u0026gt; Select inswence was created At Public IP address -\u0026gt; Copy Instance\u0026rsquo;s IP Open the Mobaxterm application to proceed with SSH Fill the Instance\u0026rsquo;s Informations\nRemote host : Instance\u0026rsquo;s IP Specify username : ec2-user At mục Advanced SSH Setting, tick Select Use private key and Select file key has created When SSH is successful we will enter the cmd interface\nUse cmd sudo su to access root Install nginx amazon-linux-extras inswell -y nginx1 Start the nginx service and enable nginx and it will turn on automatically when the server reboots systemctl swert nginx.service systemctl enable nginx.service Check the application status to see if it is working or not systemctl swetus nginx.service From the web browser, we enter EC2\u0026rsquo;s IP, and we will see nginx\u0026rsquo;s default page displayed\nDR Site "
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/",
	"title": "Start with AWS Elastic Disaster Recovery",
	"tags": [],
	"description": "",
	"content": "Start with AWS Elastic Disaster Recovery Overview Ensure the seamless operation of your workload by prioritizing its consistent performance and functionality. Achieving this goal necessitates the integration of resiliency into your architecture. Resiliency refers to your workload\u0026rsquo;s capacity to swiftly recover from disruptions within the infrastructure, services, or applications. It involves dynamically scaling computing resources to accommodate fluctuating demand and effectively managing issues such as misconfigurations or transient network disturbances.\nCentral to your resiliency strategy is disaster recovery (DR), which outlines how your workload responds in the face of catastrophic events that adversely impact your business operations. These events, termed disasters, demand a response aligned with your organization\u0026rsquo;s business objectives. Key among these objectives are the Recovery Point Objective (RPO), determining the acceptable data loss threshold, and the Recovery Time Objective (RTO), specifying the maximum allowable downtime. Therefore, your cloud workload\u0026rsquo;s design must incorporate resilience to meet these recovery objectives effectively in the event of a one-time disaster occurrence. Such an approach is pivotal for sustaining business continuity as part of Business Continuity Planning (BCP).\nThis workshop will design a simple DR model on the AWS environment, thereby giving you an overview of how the AWS Elastic Disaster Recovery service works.\nContent Introduction to DRS Repare Resouce Deploy DRS Clean up "
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/3-deploydrs/3.2-configurelauchsetting/",
	"title": "Configuring DRS recovery launch settings",
	"tags": [],
	"description": "",
	"content": "Configuring DRS recovery launch settings Moving on to the DR site, here in Virginia Head to the DRS console https://us-east-1.console.aws.amazon.com/drs/home?region=us-east-1#/welcome You should see under Source Servers your instance from your source region, either currently syncing, or completed syncing\nThis process takes about 10 to 20 minutes to fully complete, although that will vary between regions and instance sizes. When you access the EC2 interface, you will see a new instance created by Elastic Disaster Recovery. This version handles replication between your source server and DRS. This is not the server that will be used during a disaster/failover When your source server is in the Ready state, click the server name On the next page, go to the Launch Settings page In the EC2 launch template, select Edit In the EC2 launch template, we need to change some settings. You\u0026rsquo;ll see the instance type is too large for us to test, so click Edit and set it to t2.micro for the free tier\nSelect EC2 launch template Set the new installation to default Select the template you just edited Select Action Select Set default version "
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/2-repareresource/2.2-drsite/",
	"title": "DR Site",
	"tags": [],
	"description": "",
	"content": "Create VPC and other components Move to Virginia Region Switch to your destination area. As mentioned before, I\u0026rsquo;m using Virginia (us-east-1)\nSimilar to the steps performed at source site, we also proceed to initialize the network infrastructure for the DR site\nAt VPC Console\nSelect Yours VPC Select Create VPC Create key pair\nKey pair name we set target Key pair type Select RSA Private key file format Select .pem Select Create key pair to create key create Security Group for Template Instance At VPC console Select Security Group Select Create Security Group Security Group Name: set DR SG Decription: set Allow We set up the inbound rule similarly to the source site create IAM user Create IAM user In the search bar, enter IAM Select IAM At IAM console Select tab Users Select Create user User name we set druser Select Next At Permisios option, Select attach policies directly find policy AWSElasticDisasterRecoveryEc2InstancePolicy and Select Next Now to create the Access Key we need for the next step.\nWe Select tab Security credentials, at Create access key we Select Create access key This key will be needed to allow the agent to obtain information from the source server in the next step\nOn the next page, Select Command Line Interface (CLI) and Select the confirmation box Select Next Description tag value: set WS1 and Select Create access key Now make sure you copy and keep the Access Key and Secret Access Key, you will need these for the next step Configure Elastic Disaster Recovery In the Virginia region Head to the IAM console https://us-east-1.console.aws.amazon.com/drs/home You will be prompted with the initial setup wizard\nThe first step of setting up the service is to configure replication settings. These settings control where the Replication Agent sends its data\nSelect Configure and initialize Select target-subnet-public-1-us-east-1a) as the Replication subnet and t3.small for your Replication Server instance type Select Next button to switch to the Volumes and security groups section At Volume, Let\u0026rsquo;s leave the default setting At Security Group, we select DR SG, this is the security group created in step 1 Select Next to move to Configure additional replication settings section No changes need to be made on this page For this workshop we will be using the default options for Data routing and throttling, Point in time (PIT) policy, MAP program tagging and Tags Select Next to move to Set default DRS launch settings section In the Default launch settings section, the options available are Instance type right-sizing, Start instance upon launch, Copy private IP, Transfer server tags, and OS Licensing For this workshop, we will be using the default options for all except for Instance type right-sizing and Transfer server tags We will choose Inactive for Instance type right-sizing option. We Select the Transfer server tags option to enable it. Select Next to move to Set default EC2 launch template section At Basic Setting Subnet: Select the subnet that ends with -target-subnet-public1-us-east-1a Security groups: Select DR SG + Instance Type: Select t3.small + EBS volume type: Leave it to default\nAt Advanced settings IAM instance profile: Select IAM user has created is druser Auto assign public IP: Select Yes Key pair: Select key has create target For this workshop, we won\u0026rsquo;t be adding any tags in the Default EC2 launch template tags section\nSelect Next and then Configure and intialize to save your default settings. This is the configuration your source servers will take on by default when the replication agent is installed In this step, we initialized the DRS Service and configured default replication and launch settings. To proceed with DRS Replication agent installation, it is necessary to have the appropriate IAM permissions\n"
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/2-repareresource/",
	"title": "Resource preparation",
	"tags": [],
	"description": "",
	"content": "Workshop description In this workshop, we will simulate the process of deploying the DR system for 2 sites located in 2 different regions on AWS in a pubic environment with the original site located in Singapore and the DR site located in Tokyo.\nIn reality, the application infrastructure will be placed at the private layer, then we need to deploy connection paths between networks. For example, VPC peering for 2 Regions on AWS, or VPN site-to-site to connect on-premise or other Cloud infrastructure to AWS. We will learn about these components in the next workshops.\nContent Source Site DR Site "
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/3-deploydrs/",
	"title": "Deploy DRS",
	"tags": [],
	"description": "",
	"content": "Content After fully setting up the simulation environment components, we will proceed to describe the DRS process. The process will include steps\nInstall Replication Agent on the source server Configure Launch Template Simulate the failover process Installing the Agent Configuring DRS recovery launch settings Failover Replication to AWS DR Region "
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/3-deploydrs/3.3-failover/",
	"title": "Failover Replication to AWS DR Region",
	"tags": [],
	"description": "",
	"content": "Failover Replication to AWS DR Region Moving on to the DR area, here in Virginia Move to DRS console https://us-east-1.console.aws.amazon.com/drs/home?region=us-east-1#/welcome Move to Source Server, Select your Source server Select Initiate recovery job, select Initiate Recovery Drill On Next page, select Initiate drill This process will take a few minutes. If you visit the Recovery Job History page, you can view the status of the job\nOnce the restore job is complete, we can view the newly created instance in EC2 by clicking on the instance name. Then click View in EC2 Then, in the EC2 console, copy the IP address and visit it in your browser You will see the Nginx welcome page, just like we saw on the original (source) version That confirms that the source server is successfully replicated to the target region and can be restored/failed at any time, and we can be confident that our very basic application boots and successful conversion\n"
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/4-cleanup/",
	"title": "Clean up resources",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will proceed to delete the resources in the following order:\nTerminate EC2 Instances Terminate EC2 instance:\nAccess the Amazon EC2 console at EC2. On the left navigation bar, select \u0026ldquo;Instances.\u0026rdquo; Select EC2 instances related to the lab. Select Instance state. Select Terminate instance. Confirm termination.\nRemove NAT Gateway and Elastic IP Address Remove NAT Gateway and Elastic IP Address. AWS charges for wasted EIPs, so you need to double-check to avoid unintended charges.\nVisit the Amazon VPC console page at VPC.\nOn the left navigation bar, click \u0026ldquo;NAT Gateway.\u0026rdquo;\nSelect NAT Gateway.\nClick Action.\nClick Delete NAT Gateway.\nType \u0026ldquo;delete.\u0026rdquo;\nClick Delete to confirm the deletion of NAT Gateway.\nDelete Elastic IP Address Continue to delete Elastic IP Address. Visit the Amazon VPC console page at VPC. On the left navigation bar, click \u0026ldquo;Elastic IP.\u0026rdquo; Select the Elastic IP Address we created. Click Action. Click Release Elastic IP Address. Click Release. Delete the EC2 Instance connection endpoint Access to Endpoint transactions Select Action, select Delete VPC endpoints Enter delete DR Environment Stop the DR process and delete the resource Navigate to DRS console https://us-east-1.console.aws.amazon.com/drs/home?region=us-east-1#/welcome Go to Recovery Instances, select your instance, click Actions, then click Disconnect from AWS Select your instance, click Actions, then click Terminate recovery instance Go to Source Server, select your instance, click Actions, then click Disconnect from AWS Select the server instance again, select Delete server In the confirmation box, select Permanently delete\nNow when we move to the EC2 interface, we will see the DRS Replication Server servers in Terminated state\nImplement Terminta EC2 and delete the Network resource We follow the same steps as we did at the source site "
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://andrewnguyen1611.github.io/workshop01-FCD-2024/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]